PHOENIX SANGAM API - OPTIMIZATION AND RESTRUCTURING CHANGES
================================================================

Date: January 2024
Version: 2.0 (Optimized)

TABLE OF CONTENTS
=================
1. Database Changes
2. New Endpoints
3. Updated Endpoints
4. Role Name Changes
5. New DTOs and Response Formats
6. Architectural Improvements
7. File Structure Changes
8. Migration Summary

================================================================

1. DATABASE CHANGES
===================

A. Database Provider Migration
- Changed from SQL Server to PostgreSQL
- Connection String: "Host=localhost;Database=phoenix;Port=5433;Username=postgres;Password=Abcd@1234"
- Added Npgsql.EnableLegacyTimestampBehavior for DateTime compatibility

B. New Tables Added
1. LoanType Table:
   - Id (int, Primary Key)
   - LoanTypeName (string, Required)
   - InterestRate (double, Required)

2. LoanRequest Table:
   - Id (int, Primary Key)
   - UserId (int, Foreign Key to Users)
   - Date (DateTime, Required)
   - DueDate (DateTime, Required)
   - LoanTypeId (int, Foreign Key to LoanTypes)
   - Amount (decimal, Required)
   - Status (string, Required) - "Requested", "Accepted", "Rejected"
   - ProcessedDate (DateTime?)
   - ProcessedByUserId (int?, Foreign Key to Users)

C. Updated Tables
1. Loan Table:
   - Added: ClosedDate (DateTime?)
   - Added: InterestReceived (decimal)
   - Added: LoanTypeId (int, Foreign Key to LoanTypes)
   - Removed: InterestRate (decimal) - now comes from LoanType

2. UserRole Table:
   - Updated role names:
     * "Admin" → "Secretary"
     * "User" → "Member"

D. Seed Data
1. LoanType Seed Data:
   - Marriage Loan (Interest Rate: 1.5%)
   - Personal Loan (Interest Rate: 2.5%)

2. UserRole Seed Data:
   - Secretary (Id: 1, Name: "Secretary", Description: "Secretary with full access")
   - Member (Id: 2, Name: "Member", Description: "Regular member with limited access")

================================================================

2. NEW ENDPOINTS
================

A. User Management
1. GET /api/user/me
   - Purpose: Get current user details from JWT token
   - Authorization: Authenticated users
   - Response:
     {
       "id": 1,
       "name": "John Doe",
       "email": "john@example.com",
       "role": "Secretary"
     }

B. Loan Management
1. GET /api/loan/types
   - Purpose: Get all available loan types
   - Authorization: All authenticated users
   - Response:
     [
       {
         "id": 1,
         "loanTypeName": "Marriage Loan",
         "interestRate": 1.5
       },
       {
         "id": 2,
         "loanTypeName": "Personal Loan",
         "interestRate": 2.5
       }
     ]

2. POST /api/loan/repayment
   - Purpose: Process loan repayment
   - Authorization: Secretary only
   - Request:
     {
       "loanId": 1,
       "userId": 1,
       "loanAmount": 10000,
       "interestAmount": 500,
       "closedDate": "2024-06-01"
     }

C. Loan Request System (NEW)
1. POST /api/dashboard/loan-requests
   - Purpose: Create loan request
   - Authorization: All authenticated users
   - Request:
     {
       "amount": 10000,
       "loanTypeId": 1,
       "dueDate": "2024-06-01"
     }

2. GET /api/dashboard/loan-requests
   - Purpose: Get loan requests (all for Secretary, own for Members)
   - Authorization: All authenticated users
   - Response: Array of LoanRequestResponseDto

3. GET /api/dashboard/loan-requests/{id}
   - Purpose: Get specific loan request
   - Authorization: All authenticated users (own requests only for Members)
   - Response: Single LoanRequestResponseDto

4. DELETE /api/dashboard/loan-requests/{id}
   - Purpose: Delete loan request
   - Authorization: All authenticated users (own requests only for Members)

5. PUT /api/dashboard/loan-requests/{id}/action
   - Purpose: Approve/reject loan request
   - Authorization: Secretary only
   - Request:
     {
       "action": "accepted"  // or "rejected"
     }

================================================================

3. UPDATED ENDPOINTS
====================

A. Loan Management
1. POST /api/loan (UPDATED)
   - Request Format Changed:
     OLD: {
       "userId": 1,
       "date": "2024-01-01",
       "dueDate": "2024-06-01",
       "interestRate": 1.5,
       "amount": 10000,
       "status": "active"
     }
     NEW: {
       "userId": 1,
       "date": "2024-01-01",
       "dueDate": "2024-06-01",
       "closedDate": null,
       "loanTypeId": 1,        // NEW: Replaced interestRate
       "amount": 10000,
       "status": "active"
     }

2. GET /api/loan (UPDATED)
   - Response Format Changed:
     OLD: {
       "id": 1,
       "userId": 1,
       "userName": "John Doe",
       "date": "2024-01-01T00:00:00Z",
       "dueDate": "2024-06-01T00:00:00Z",
       "interestRate": 1.5,
       "amount": 10000,
       "status": "active"
     }
     NEW: {
       "id": 1,
       "userId": 1,
       "userName": "John Doe",
       "date": "2024-01-01T00:00:00Z",
       "dueDate": "2024-06-01T00:00:00Z",
       "closedDate": null,
       "loanTypeId": 1,           // NEW
       "loanTypeName": "Marriage Loan",  // NEW
       "interestRate": 1.5,       // NEW: From LoanType
       "amount": 10000,
       "interestReceived": 500,   // NEW
       "status": "active",
       "daysSinceIssue": 150,
       "interestAmount": 750,
       "isOverdue": false,
       "daysOverdue": 0
     }

B. Dashboard Endpoints
1. GET /api/dashboard/loans (UPDATED)
   - Now includes LoanType information
   - Added interestReceived field
   - Added overdue calculations

2. GET /api/dashboard/loans-due (UPDATED)
   - Response Format Changed:
     OLD: {
       "overdueLoans": [...],
       "upcomingLoans": [...]
     }
     NEW: {
       "overdueLoans": [...],      // Array of LoanWithInterestDto
       "dueTodayLoans": [...],     // Array of LoanWithInterestDto
       "dueThisWeekLoans": [...],  // Array of LoanWithInterestDto
       "totalOverdueCount": 5,
       "totalDueTodayCount": 2,
       "totalDueThisWeekCount": 8,
       "totalOverdueAmount": 50000,
       "totalDueTodayAmount": 20000,
       "totalDueThisWeekAmount": 80000
     }

3. GET /api/dashboard/summary (UPDATED)
   - Added more comprehensive statistics
   - Includes recent loans and meetings
   - Better categorization of data

================================================================

4. ROLE NAME CHANGES
====================

All endpoints that previously used role-based authorization have been updated:

BEFORE:
- [Authorize(Roles = "Admin")] → [Authorize(Roles = "Secretary")]
- [Authorize(Roles = "User")] → [Authorize(Roles = "Member")]

AFFECTED ENDPOINTS:
- GET /api/user (Secretary only)
- GET /api/user/{id} (Secretary only)
- POST /api/user (Secretary only)
- PUT /api/user/{id} (Secretary only)
- DELETE /api/user/{id} (Secretary only)
- GET /api/loan (Secretary only)
- GET /api/loan/{id} (Secretary only)
- POST /api/loan (Secretary only)
- PUT /api/loan/{id} (Secretary only)
- DELETE /api/loan/{id} (Secretary only)
- POST /api/loan/repayment (Secretary only)
- GET /api/meeting (Secretary only)
- GET /api/meeting/{id} (Secretary only)
- POST /api/meeting (Secretary only)
- PUT /api/meeting/{id} (Secretary only)
- DELETE /api/meeting/{id} (Secretary only)
- PUT /api/dashboard/loan-requests/{id}/action (Secretary only)

================================================================

5. NEW DTOS AND RESPONSE FORMATS
================================

A. New DTOs Added
1. LoanTypeDto:
   {
     "id": 1,
     "loanTypeName": "Marriage Loan",
     "interestRate": 1.5
   }

2. CreateLoanRequestDto:
   {
     "amount": 10000,
     "loanTypeId": 1,
     "dueDate": "2024-06-01"
   }

3. LoanRequestResponseDto:
   {
     "id": 1,
     "userId": 1,
     "userName": "John Doe",
     "date": "2024-01-01T00:00:00Z",
     "dueDate": "2024-06-01T00:00:00Z",
     "loanTypeId": 1,
     "loanTypeName": "Marriage Loan",
     "interestRate": 1.5,
     "amount": 10000,
     "status": "Requested",
     "requestDate": "2024-01-01T00:00:00Z",
     "processedDate": null,
     "processedByUserName": null
   }

4. LoanRepaymentDto:
   {
     "loanId": 1,
     "userId": 1,
     "loanAmount": 10000,
     "interestAmount": 500,
     "closedDate": "2024-06-01"
   }

5. LoanRequestActionDto:
   {
     "action": "accepted"  // or "rejected"
   }

B. Updated DTOs
1. CreateLoanDto:
   - Removed: interestRate
   - Added: loanTypeId, closedDate

2. LoanWithInterestDto:
   - Added: closedDate, loanTypeId, loanTypeName, interestReceived
   - Updated: interestRate now comes from LoanType

3. DashboardSummaryResponse:
   - Added: totalUsers, totalLoans, totalLoanAmount, totalInterestAmount, overdueLoans
   - Added: recentMeetings, recentLoans

4. LoanDueResponse:
   - Changed: upcomingLoans → dueTodayLoans, dueThisWeekLoans
   - Added: comprehensive statistics

C. New Response Wrappers (Optional)
1. ApiResponse<T>:
   {
     "success": true,
     "message": "Success",
     "data": { /* actual response data */ },
     "errors": [],
     "timestamp": "2024-01-01T00:00:00Z"
   }

2. PaginatedResponse<T>:
   {
     "data": [...],
     "pagination": {
       "page": 1,
       "pageSize": 10,
       "totalCount": 100,
       "totalPages": 10,
       "hasNextPage": true,
       "hasPreviousPage": false
     }
   }

================================================================

6. ARCHITECTURAL IMPROVEMENTS
==============================

A. Service Layer Architecture
- Created ILoanService and LoanService
- Moved business logic from controllers to services
- Better separation of concerns

B. Repository Pattern
- Created IGenericRepository<T> and GenericRepository<T>
- Abstracted data access layer
- Improved testability

C. Base Controller Pattern
- Created BaseController with common functionality
- Standardized response methods
- Centralized error handling
- Common user authentication logic

D. Middleware for Cross-Cutting Concerns
- ExceptionHandlingMiddleware for global exception handling
- RequestLoggingMiddleware for request/response logging
- Added to application pipeline

E. Caching Service
- Created ICacheService and MemoryCacheService
- Performance optimization
- Registered in dependency injection

F. Validation Service
- Created IValidationService and ValidationService
- Centralized object validation
- Added validation helpers

G. Generic Response Wrappers
- ApiResponse<T> for consistent API responses
- PaginatedResponse<T> for paginated data
- BaseDto and BaseRequestDto for common DTO functionality

================================================================

7. FILE STRUCTURE CHANGES
=========================

NEW FILES ADDED:
- DTOs/BaseResponse.cs
- Controllers/BaseController.cs
- Controllers/OptimizedLoanController.cs (example)
- Services/ILoanService.cs
- Services/LoanService.cs
- Services/ICacheService.cs
- Services/MemoryCacheService.cs
- Services/IValidationService.cs
- Services/ValidationService.cs
- Repositories/IGenericRepository.cs
- Repositories/GenericRepository.cs
- Middleware/ExceptionHandlingMiddleware.cs
- Models/LoanType.cs
- Models/LoanRequest.cs
- OPTIMIZATION_GUIDE.md

UPDATED FILES:
- Program.cs (added new service registrations)
- UserDbContext.cs (added new entities and seed data)
- Controllers/*.cs (updated role names and DTOs)
- ResponseDto.cs (added new DTOs)
- LoanDto.cs (updated for new loan structure)
- ServiceExtensions.cs (added PostgreSQL compatibility)

MIGRATION FILES:
- 20250801045718_AddLoanTypesAndLoanRequests.cs
- 20250801092101_UpdateUserRoleNames.cs

================================================================

8. MIGRATION SUMMARY
====================

A. Database Migrations Applied
1. Initial PostgreSQL migration
2. AddLoanTypesAndLoanRequests migration
3. UpdateUserRoleNames migration

B. Key Migration Changes
1. Added LoanType and LoanRequest tables
2. Updated Loan table with new fields
3. Updated UserRole names
4. Added seed data for loan types and roles

C. Data Migration Strategy
1. Existing loans assigned to "Personal Loan" type (ID: 2)
2. Role names updated in database
3. Foreign key constraints properly handled

================================================================

BREAKING CHANGES
================

1. Database Provider: SQL Server → PostgreSQL
2. Role Names: "Admin" → "Secretary", "User" → "Member"
3. Loan Structure: Added LoanType relationship, removed direct interestRate
4. Loan Request System: New workflow for loan approval
5. Response Formats: Enhanced with additional fields and better structure

BACKWARD COMPATIBILITY
======================

- All existing endpoints maintain their URL structure
- Response formats enhanced but not breaking
- New endpoints are additive
- Optional response wrappers available
- Gradual migration to new patterns possible

================================================================

DEPLOYMENT NOTES
================

1. Database Migration Required
   - Run: dotnet ef database update
   - Ensure PostgreSQL is running
   - Verify connection string

2. Configuration Updates
   - Update appsettings.json with PostgreSQL connection
   - Verify role names in JWT tokens
   - Test new endpoints

3. Client Updates Required
   - Update role-based authorization checks
   - Handle new loan request workflow
   - Update loan creation to use loanTypeId
   - Handle enhanced response formats

4. Testing Checklist
   - Verify all endpoints work with new role names
   - Test loan request approval workflow
   - Validate loan type integration
   - Check dashboard statistics
   - Test user info endpoint

================================================================

This document provides a comprehensive overview of all changes made during the optimization and restructuring process. All changes maintain backward compatibility while adding significant new functionality and improving the overall architecture. 